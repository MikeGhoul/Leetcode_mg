{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "643ec8f6-d710-48e9-ae75-f294d0ff4150",
   "metadata": {},
   "source": [
    "# 189. Rotate Array\n",
    "\n",
    "Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.\n",
    "\n",
    "\n",
    "Example 1:\n",
    "- Input: nums = [1,2,3,4,5,6,7], k = 3\n",
    "- Output: [5,6,7,1,2,3,4]\n",
    "- Explanation:\n",
    "    - rotate 1 steps to the right: [7,1,2,3,4,5,6]\n",
    "    - rotate 2 steps to the right: [6,7,1,2,3,4,5]\n",
    "    - rotate 3 steps to the right: [5,6,7,1,2,3,4]\n",
    "\n",
    "Example 2:\n",
    "- Input: nums = [-1,-100,3,99], k = 2\n",
    "- Output: [3,99,-1,-100]\n",
    "- Explanation: \n",
    "    - rotate 1 steps to the right: [99,-1,-100,3]\n",
    "    - rotate 2 steps to the right: [3,99,-1,-100]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1199b771-32cc-4bb8-b3f2-555efb663e51",
   "metadata": {},
   "outputs": [],
   "source": [
    "def rotate(nums, k):\n",
    "    \"\"\"\n",
    "    Do not return anything, modify nums in-place instead.\n",
    "    \"\"\"\n",
    "    # This doesn't pass all test cases where k is bigger than len(nums):\n",
    "    nums[:] = nums[-k:] + nums[: -k]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2a10e0a8-371c-4126-8505-58d3eea3fdba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test 1:\n",
    "\n",
    "nums = [1,2,3,4,5,6,7]\n",
    "k = 3\n",
    "\n",
    "# Expected output = [5,6,7,1,2,3,4]\n",
    "rotate(nums, k)\n",
    "nums"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b988622c-7063-47fd-9bfa-cb3e6626cc23",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[3, 99, -1, -100]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Test 2:\n",
    "\n",
    "nums = [-1,-100,3,99]\n",
    "k = 2\n",
    "\n",
    "# Expected output = [3,99,-1,-100]\n",
    "rotate(nums, k)\n",
    "nums"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfa37d9e-31fa-44b8-b767-576088cbbce1",
   "metadata": {},
   "source": [
    "While this solution works for the two smaller test cases, it does not do well for much larger inputs as the complexity causes the test to time out in Leetcode.\n",
    "\n",
    "Let's try a more optimal approach:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8988b0a3-e377-4b49-8699-dd0af2cfe09a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def rotate(nums, k):\n",
    "    \"\"\"\n",
    "    instead calc the steps as k % len(nums) so it can calc a starting point in relation to the length of the list. \n",
    "    e.g. if k is longer than the list it will start back at the beginning\n",
    "    \n",
    "    \"\"\"\n",
    "    steps =  k % len(nums)\n",
    "    nums[:] = nums[-steps:] + nums[:-steps]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8dd43cd0-3090-4881-beac-dfb9e6d9edca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[5, 6, 7, 1, 2, 3, 4]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Test 1:\n",
    "\n",
    "nums = [1,2,3,4,5,6,7]\n",
    "k = 3\n",
    "\n",
    "# Expected output = [5,6,7,1,2,3,4]\n",
    "rotate(nums, k)\n",
    "nums"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2c7195de-73c4-4039-9fdd-b58063c3f9ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[3, 99, -1, -100]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Test 2:\n",
    "\n",
    "nums = [-1,-100,3,99]\n",
    "k = 2\n",
    "\n",
    "# Expected output = [3,99,-1,-100]\n",
    "rotate(nums, k)\n",
    "nums"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
